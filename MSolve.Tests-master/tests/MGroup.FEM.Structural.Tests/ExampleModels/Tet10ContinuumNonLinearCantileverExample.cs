using System.Collections.Generic;
using MGroup.Constitutive.Structural;
using MGroup.Constitutive.Structural.Continuum;
using MGroup.Constitutive.Structural.Transient;
using MGroup.MSolve.Discretization.Entities;
using MGroup.FEM.Structural.Continuum;
using MGroup.FEM.Helpers;
using MGroup.MSolve.Discretization;
using MGroup.Constitutive.Structural.BoundaryConditions;

namespace MGroup.FEM.Structural.Tests.ExampleModels
{
	public class Tet10ContinuumNonLinearCantileverExample
	{
		private static readonly double[,] nodeData =
			new double[,] {
				{-0.2500000000000000,0.2500000000000000,-1.0000000000000000},
				{0.2500000000000000,0.2500000000000000,-1.0000000000000000},
				{0.2500000000000000,-0.2500000000000000,-1.0000000000000000},
				{-0.2500000000000000,-0.2500000000000000,-1.0000000000000000},
				{-0.2500000000000000,0.2500000000000000,1.0000000000000000},
				{0.2500000000000000,0.2500000000000000,1.0000000000000000},
				{0.2500000000000000,-0.2500000000000000,1.0000000000000000},
				{-0.2500000000000000,-0.2500000000000000,1.0000000000000000},
				{-0.2500000000000000,0.2500000000000000,0.0000000000000000},
				{0.2500000000000000,0.2500000000000000,0.0000000000000000},
				{0.2500000000000000,-0.2500000000000000,0.0000000000000000},
				{-0.2500000000000000,-0.2500000000000000,0.0000000000000000},
				{0.0000000000000000,0.2500000000000000,-1.0000000000000000},
				{0.2500000000000000,0.0000000000000000,-1.0000000000000000},
				{0.0000000000000000,-0.2500000000000000,-1.0000000000000000},
				{-0.2500000000000000,0.0000000000000000,-1.0000000000000000},
				{0.0000000000000000,0.2500000000000000,1.0000000000000000},
				{0.2500000000000000,0.0000000000000000,1.0000000000000000},
				{0.0000000000000000,-0.2500000000000000,1.0000000000000000},
				{-0.2500000000000000,0.0000000000000000,1.0000000000000000},
				{0.0000000000000000,0.2500000000000000,0.0000000000000000},
				{0.2500000000000000,0.0000000000000000,0.0000000000000000},
				{0.0000000000000000,-0.2500000000000000,0.0000000000000000},
				{-0.2500000000000000,0.0000000000000000,0.0000000000000000},
				{-0.2500000000000000,0.2500000000000000,-0.5000000000000000},
				{0.2500000000000000,0.2500000000000000,-0.5000000000000000},
				{0.2500000000000000,-0.2500000000000000,-0.5000000000000000},
				{-0.2500000000000000,-0.2500000000000000,-0.5000000000000000},
				{-0.2500000000000000,0.2500000000000000,0.5000000000000000},
				{0.2500000000000000,0.2500000000000000,0.5000000000000000},
				{0.2500000000000000,-0.2500000000000000,0.5000000000000000},
				{-0.2500000000000000,-0.2500000000000000,0.5000000000000000},
				{0.0000000000000000,0.0000000000000000,-1.0000000000000000},
				{-0.1250000000000000,0.1250000000000000,-1.0000000000000000},
				{0.1250000000000000,0.1250000000000000,-1.0000000000000000},
				{0.1250000000000000,-0.1250000000000000,-1.0000000000000000},
				{-0.1250000000000000,-0.1250000000000000,-1.0000000000000000},
				{0.0000000000000000,0.0000000000000000,1.0000000000000000},
				{-0.1250000000000000,0.1250000000000000,1.0000000000000000},
				{0.1250000000000000,0.1250000000000000,1.0000000000000000},
				{0.1250000000000000,-0.1250000000000000,1.0000000000000000},
				{-0.1250000000000000,-0.1250000000000000,1.0000000000000000},
				{0.0000000000000000,0.0000000000000000,0.0000000000000000},
				{-0.1250000000000000,0.1250000000000000,0.0000000000000000},
				{0.1250000000000000,0.1250000000000000,0.0000000000000000},
				{0.1250000000000000,-0.1250000000000000,0.0000000000000000},
				{-0.1250000000000000,-0.1250000000000000,0.0000000000000000},
				{0.0000000000000000,0.2500000000000000,-0.5000000000000000},
				{0.1250000000000000,0.2500000000000000,-0.7500000000000000},
				{-0.1250000000000000,0.2500000000000000,-0.7500000000000000},
				{-0.1250000000000000,0.2500000000000000,-0.2500000000000000},
				{0.1250000000000000,0.2500000000000000,-0.2500000000000000},
				{0.2500000000000000,0.0000000000000000,-0.5000000000000000},
				{0.2500000000000000,-0.1250000000000000,-0.7500000000000000},
				{0.2500000000000000,0.1250000000000000,-0.7500000000000000},
				{0.2500000000000000,0.1250000000000000,-0.2500000000000000},
				{0.2500000000000000,-0.1250000000000000,-0.2500000000000000},
				{0.0000000000000000,-0.2500000000000000,-0.5000000000000000},
				{-0.1250000000000000,-0.2500000000000000,-0.7500000000000000},
				{0.1250000000000000,-0.2500000000000000,-0.7500000000000000},
				{0.1250000000000000,-0.2500000000000000,-0.2500000000000000},
				{-0.1250000000000000,-0.2500000000000000,-0.2500000000000000},
				{-0.2500000000000000,0.0000000000000000,-0.5000000000000000},
				{-0.2500000000000000,0.1250000000000000,-0.7500000000000000},
				{-0.2500000000000000,-0.1250000000000000,-0.7500000000000000},
				{-0.2500000000000000,-0.1250000000000000,-0.2500000000000000},
				{-0.2500000000000000,0.1250000000000000,-0.2500000000000000},
				{0.0000000000000000,0.2500000000000000,0.5000000000000000},
				{0.1250000000000000,0.2500000000000000,0.2500000000000000},
				{-0.1250000000000000,0.2500000000000000,0.2500000000000000},
				{-0.1250000000000000,0.2500000000000000,0.7500000000000000},
				{0.1250000000000000,0.2500000000000000,0.7500000000000000},
				{0.2500000000000000,0.0000000000000000,0.5000000000000000},
				{0.2500000000000000,-0.1250000000000000,0.2500000000000000},
				{0.2500000000000000,0.1250000000000000,0.2500000000000000},
				{0.2500000000000000,0.1250000000000000,0.7500000000000000},
				{0.2500000000000000,-0.1250000000000000,0.7500000000000000},
				{0.0000000000000000,-0.2500000000000000,0.5000000000000000},
				{-0.1250000000000000,-0.2500000000000000,0.2500000000000000},
				{0.1250000000000000,-0.2500000000000000,0.2500000000000000},
				{0.1250000000000000,-0.2500000000000000,0.7500000000000000},
				{-0.1250000000000000,-0.2500000000000000,0.7500000000000000},
				{-0.2500000000000000,0.0000000000000000,0.5000000000000000},
				{-0.2500000000000000,0.1250000000000000,0.2500000000000000},
				{-0.2500000000000000,-0.1250000000000000,0.2500000000000000},
				{-0.2500000000000000,-0.1250000000000000,0.7500000000000000},
				{-0.2500000000000000,0.1250000000000000,0.7500000000000000},
				{0.0000000000000000,0.0000000000000000,-0.5000000000000000},
				{-0.1250000000000000,0.1250000000000000,-0.7500000000000000},
				{0.1250000000000000,0.1250000000000000,-0.7500000000000000},
				{0.1250000000000000,-0.1250000000000000,-0.7500000000000000},
				{-0.1250000000000000,-0.1250000000000000,-0.7500000000000000},
				{-0.1250000000000000,0.1250000000000000,-0.2500000000000000},
				{0.1250000000000000,0.1250000000000000,-0.2500000000000000},
				{0.1250000000000000,-0.1250000000000000,-0.2500000000000000},
				{-0.1250000000000000,-0.1250000000000000,-0.2500000000000000},
				{0.0000000000000000,0.0000000000000000,-0.7500000000000000},
				{0.0000000000000000,0.1250000000000000,-0.5000000000000000},
				{0.1250000000000000,0.0000000000000000,-0.5000000000000000},
				{0.0000000000000000,-0.1250000000000000,-0.5000000000000000},
				{-0.1250000000000000,0.0000000000000000,-0.5000000000000000},
				{0.0000000000000000,0.0000000000000000,-0.2500000000000000},
				{0.0000000000000000,0.0000000000000000,0.5000000000000000},
				{-0.1250000000000000,0.1250000000000000,0.2500000000000000},
				{0.1250000000000000,0.1250000000000000,0.2500000000000000},
				{0.1250000000000000,-0.1250000000000000,0.2500000000000000},
				{-0.1250000000000000,-0.1250000000000000,0.2500000000000000},
				{-0.1250000000000000,0.1250000000000000,0.7500000000000000},
				{0.1250000000000000,0.1250000000000000,0.7500000000000000},
				{0.1250000000000000,-0.1250000000000000,0.7500000000000000},
				{-0.1250000000000000,-0.1250000000000000,0.7500000000000000},
				{0.0000000000000000,0.0000000000000000,0.2500000000000000},
				{0.0000000000000000,0.1250000000000000,0.5000000000000000},
				{0.1250000000000000,0.0000000000000000,0.5000000000000000},
				{0.0000000000000000,-0.1250000000000000,0.5000000000000000},
				{-0.1250000000000000,0.0000000000000000,0.5000000000000000},
				{0.0000000000000000,0.0000000000000000,0.7500000000000000}
			};

		private static readonly int[,] elementData =
			new int[,] {
				{33,2,1,88,35,13,34,90,89,97},
				{33,3,2,88,36,14,35,91,90,97},
				{33,4,3,88,37,15,36,92,91,97},
				{33,1,4,88,34,16,37,89,92,97},
				{48,1,2,88,50,13,49,89,90,98},
				{48,2,10,88,49,26,52,90,94,98},
				{48,10,9,88,52,21,51,94,93,98},
				{48,9,1,88,51,25,50,93,89,98},
				{53,2,3,88,55,14,54,90,91,99},
				{53,3,11,88,54,27,57,91,95,99},
				{53,11,10,88,57,22,56,95,94,99},
				{53,10,2,88,56,26,55,94,90,99},
				{58,3,4,88,60,15,59,91,92,100},
				{58,11,3,88,61,27,60,95,91,100},
				{58,12,11,88,62,23,61,96,95,100},
				{58,4,12,88,59,28,62,92,96,100},
				{63,4,1,88,65,16,64,92,89,101},
				{63,12,4,88,66,28,65,96,92,101},
				{63,9,12,88,67,24,66,93,96,101},
				{63,1,9,88,64,25,67,89,93,101},
				{43,9,10,88,44,21,45,93,94,102},
				{43,10,11,88,45,22,46,94,95,102},
				{43,11,12,88,46,23,47,95,96,102},
				{43,12,9,88,47,24,44,96,93,102},
				{43,10,9,103,45,21,44,105,104,112},
				{43,11,10,103,46,22,45,106,105,112},
				{43,12,11,103,47,23,46,107,106,112},
				{43,9,12,103,44,24,47,104,107,112},
				{68,9,10,103,70,21,69,104,105,113},
				{68,10,6,103,69,30,72,105,109,113},
				{68,6,5,103,72,17,71,109,108,113},
				{68,5,9,103,71,29,70,108,104,113},
				{73,10,11,103,75,22,74,105,106,114},
				{73,11,7,103,74,31,77,106,110,114},
				{73,7,6,103,77,18,76,110,109,114},
				{73,6,10,103,76,30,75,109,105,114},
				{78,11,12,103,80,23,79,106,107,115},
				{78,7,11,103,81,31,80,110,106,115},
				{78,8,7,103,82,19,81,111,110,115},
				{78,12,8,103,79,32,82,107,111,115},
				{83,12,9,103,85,24,84,107,104,116},
				{83,8,12,103,86,32,85,111,107,116},
				{83,5,8,103,87,20,86,108,111,116},
				{83,9,5,103,84,29,87,104,108,116},
				{38,5,6,103,39,17,40,108,109,117},
				{38,6,7,103,40,18,41,109,110,117},
				{38,7,8,103,41,19,42,110,111,117},
				{38,8,5,103,42,20,39,111,108,117},
			};
		public static Model CreateModel()
		{
			var model = new Model();

			model.SubdomainsDictionary.Add(key: 0, new Subdomain(id: 0));

			for (var i = 0; i < nodeData.GetLength(0); i++)
			{
				var nodeId = i + 1;
				model.NodesDictionary.Add(nodeId, new Node(
					id: i + 1,
					x: nodeData[i, 0],
					y: nodeData[i, 1],
					z: nodeData[i, 2]
				));
			}

			var adinaOrder = new AdinaElementLocalNodeOrdering();

			for (var i = 0; i < elementData.GetLength(0); i++)
			{

				var nodeSet = new Node[10];
				for (var j = 0; j < 10; j++)
				{
					var nodeID = elementData[i, j];
					nodeSet[j] = (Node)model.NodesDictionary[nodeID];
				}

				var elasticMaterial = new ElasticMaterial3D(youngModulus: 1353000, poissonRatio: 0.3);
				var DynamicMaterial = new TransientAnalysisProperties(density: 1, rayleighCoeffMass: 0, rayleighCoeffStiffness: 0);
				var elementFactory = new ContinuumElement3DFactory(elasticMaterial, DynamicMaterial);

				var nodeSet1 = adinaOrder.ReorderNodes(nodeSet, CellType.Tet10);
				var element = elementFactory.CreateNonLinearElement(CellType.Tet10, nodeSet1, elasticMaterial, DynamicMaterial);
				element.ID = i + 1;

				model.ElementsDictionary.Add(element.ID, element);
				model.SubdomainsDictionary[0].Elements.Add(element);
			}

			var constrainedIds = new int[] { 1, 2, 3, 4, 13, 14, 15, 16, 33, 34, 35, 36, 37 };

			var constraints = new List<INodalDisplacementBoundaryCondition>();
			for (var i = 0; i < constrainedIds.Length; i++)
			{
				var constrainedNodeId = constrainedIds[i];
				constraints.Add(new NodalDisplacement(model.NodesDictionary[constrainedNodeId], StructuralDof.TranslationX, amount: 0d));
				constraints.Add(new NodalDisplacement(model.NodesDictionary[constrainedNodeId], StructuralDof.TranslationY, amount: 0d));
				constraints.Add(new NodalDisplacement(model.NodesDictionary[constrainedNodeId], StructuralDof.TranslationZ, amount: 0d));
			}

			var loads = new List<INodalLoadBoundaryCondition>();
			for (var i = 5; i < 9; i++)
			{
				loads.Add(new NodalLoad
				(
					model.NodesDictionary[i],
					StructuralDof.TranslationX,
					1 * 850d
				));
			}

			model.BoundaryConditions.Add(new StructuralBoundaryConditionSet(constraints, loads));

			return model;
		}

		public static double[] GetExpectedDisplacements()
		{
			var expectedSolutionOfIters5And12 = new double[] { 0.56783, 0.921567, 0.615967, 1.05899 };
			return expectedSolutionOfIters5And12;
		}
	}
}
